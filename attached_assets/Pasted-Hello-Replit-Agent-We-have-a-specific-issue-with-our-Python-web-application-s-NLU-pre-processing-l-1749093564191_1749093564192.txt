Hello Replit Agent,

We have a specific issue with our Python web application's NLU pre-processing layer that interacts with Salesforce via Zapier MCP.

Current Situation (referencing user-provided image image_195f28.png):

The command "show account QA TESTING" (a more explicit query) works correctly. The NLU processes it, sends an input string to Zapier, and Salesforce data is returned and displayed.
The command "show accounts with QA in name" (a more flexible query) results in a "Tool call failed: 405 -" error. This means the specific input string generated by the NLU for this type of query is causing the Zapier MCP endpoint to reject the request method.
This indicates the ZAPIER_MCP_SERVER_URL itself is correct, but the input string generated by the NLU for certain flexible queries is problematic.
Goal:
Modify the NLU pre-processing function (get_optimized_zapier_input) in the Python backend to ensure it always generates a valid and well-structured input string for Zapier that does not cause a 405 error, especially for flexible "find multiple records with a 'contains' criteria" queries. The NLU should be robust enough to translate even slightly ambiguous user queries into a format that Zapier can handle without method rejection.

Detailed Requirements for Modifying the NLU Pre-processor:

Robust NLU Output Generation:

The NLU model (e.g., GPT-4 via client.chat.completions.create) must be re-instructed via its system prompt to always produce a non-empty, coherent, natural language input string for Zapier, even if the user's raw query is very vague.
Priority 1: Avoid 405 errors. The generated string must be palatable to the Zapier MCP endpoint.
Priority 2: Correctly parse searchValue and other parameters. (This was the focus of previous prompts).
New System Prompt Emphasis for NLU Model:
"You are an AI that translates raw user Salesforce queries into simple, natural language input strings for a Zapier MCP tool. Your primary goal is to construct an input string that Zapier can parse successfully for its object, fieldToSearch, operator, and searchValue parameters, and that will not be rejected by the Zapier MCP endpoint (avoiding 405 errors)."
"If the user query is ambiguous or lacks detail (e.g., 'show accounts with QA in name'), try to formulate a reasonable search instruction for Zapier. For find operations, use a structure like: 'Find Salesforce [Object] [records/record] where [Field] [operator] \'[Value]\'' or simpler forms like 'Show me [Object] records with \'[Value]\' in the [Field]' or '[Object] with \'[Value]\' in [Field]'."
"Ensure the generated sentence is a complete, natural-sounding instruction. If you cannot confidently create a valid instruction that includes a clear object, field, and value for searching, you MUST return a specific fallback string like: ERROR:NLU_CONFUSION instead of an empty or malformed instruction."
Backend Handling of NLU Output:

In the API endpoint (e.g., /send_command) after calling get_optimized_zapier_input():
Check for the fallback string: If get_optimized_zapier_input() returns "ERROR:NLU_CONFUSION" (or whatever fallback you define), do not proceed to call client.responses.create(...). Instead, return an appropriate error message to the frontend (e.g., "Sorry, I couldn't understand your request. Could you please try rephrasing it or be more specific?").
This prevents sending a potentially malformed or empty input to Zapier that could cause a 405.
Enhanced Logging (Crucial for Debugging):

Before calling client.responses.create(...) with the (NLU-optimized) input string, log this exact input string to the Replit console. This is vital for us to see what the NLU is generating for both working and failing user queries.
Example Log: print(f"DEBUG: NLU generated input for Zapier: '{optimized_input_string}'")
List of Available Zapier Salesforce Tools (for NLU System Prompt context - ensure accuracy):

[
    "Salesforce: Find Record", "Salesforce: Find Record(s)", /* ... other tools ... */
    "Salesforce: Create Record", "Salesforce: Update Record"
]
Request to Replit Agent:
Please update the Python backend code, focusing on:

Modifying the system prompt within the get_optimized_zapier_input() function to emphasize the generation of valid, natural sentences for Zapier and to return a specific error string (e.g., ERROR:NLU_CONFUSION) if it cannot generate a good query.
Updating the main API endpoint (e.g., /send_command) to check for this error string from the NLU and handle it by informing the user, rather than proceeding with a faulty Zapier call.
Adding a clear print() statement to log the exact NLU-generated input string before it's sent to client.responses.create(...).
The goal is to ensure that even for flexible queries that the NLU might struggle to fully specify, it either produces a best-effort simple query that Zapier can handle or clearly indicates that it couldn't process the request, thus preventing the 405 error.