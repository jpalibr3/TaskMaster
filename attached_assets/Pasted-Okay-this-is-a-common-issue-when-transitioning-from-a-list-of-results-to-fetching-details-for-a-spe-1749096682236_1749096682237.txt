Okay, this is a common issue when transitioning from a list of results to fetching details for a specific item. The error message "Error: Zapier requires more specific parameters. Question: Is the email address stored on the related Contact or Account for the Asset? If not, please specify where the email is stored." indicates that the process of getting details for the *selected asset* is re-introducing ambiguity related to the email address.

Here's what's happening and how to fix it:

**The Current Flawed Flow for Getting Details:**

1.  **Initial Query:** You type "show assets tied to the email jhebhardt@cox.net".
2.  **Backend (`/api/send_command` in `app.py`):**
    * This command is processed by `get_optimized_zapier_input` and then `call_zapier_mcp`.
    * Zapier/Salesforce successfully returns a list of (summary) asset records related to that email. This part works.
    * The backend sends a `multiple_records` response to the frontend, including summaries of these assets (name, ID, etc.).
3.  **Frontend (`static/script.js`):**
    * The `displayMultipleRecords` function stores these summaries in `this.currentRecords` and the original command ("show assets tied to...") in `this.originalCommand`.
    * The `showRecordSelection` function displays the modal with the list.
4.  **You Select an Asset:**
    * You click on one of the assets in the modal.
    * The `selectRecord(index)` function in `script.js` is called.
5.  **Problem in `selectRecord(index)` and `/api/get_record_details`:**
    * `selectRecord` sends a request to `/api/get_record_details` with the `index` of the selected item and, crucially, the `this.originalCommand` (which is still "show assets tied to the email jhebhardt@cox.net").
    * The `/api/get_record_details` endpoint in `app.py` then **re-executes this original, ambiguous command** using `assistant.call_zapier_mcp(original_command)`.
    * This re-execution is the problem. Instead of using the unique ID of the asset you just selected to fetch its details, it's asking Zapier the same general question again. Zapier, when trying to process this general question in the context of (presumably) fetching a single, specific record or verifying it, encounters the same ambiguity about the email and asks for clarification.

**The Correct Approach: Fetch by ID**

When the user selects a specific record from a list, you should use that record's unique Salesforce ID to fetch its full details.

**Here are the necessary changes:**

**1. Modify `static/script.js`:**

* **In `displayMultipleRecords`**: Ensure the `record_summaries` you create and store in `this.currentRecords` definitely contain the Salesforce `id` for each record. It looks like you're already doing this:
    ```javascript
    // In displayMultipleRecords in script.js
    // ...
    record_summaries.append({
        index: i,
        name: name,
        email: email, // This might be empty for assets
        id: record_id, // <<< Make sure this is the Salesforce ID
        display: f"{name} ({email})" if email else name
    });
    // ...
    this.currentRecords = record_summaries; // Make sure this assignment happens if it's not already
    // Also store the object type if known from the backend response
    if (data.object_type) {
        this.currentRecordsObjectType = data.object_type;
    }
    ```

* **In `selectRecord(index)`**: Send the `record_id` and the `record_type` to the backend instead of (or in addition to) `original_command` and `record_index`.
    ```javascript
    // In selectRecord(index) in script.js
    async selectRecord(index) {
        this.hideModal('recordSelectionModal');
        this.showLoading();

        const selectedRecordSummary = this.currentRecords[index];
        if (!selectedRecordSummary || !selectedRecordSummary.id) {
            this.addMessage('Error: Could not retrieve the ID for the selected record.', 'ai', 'error');
            this.hideLoading();
            return;
        }
        const recordId = selectedRecordSummary.id;
        // Attempt to get the object type. Default to 'Asset' if not found for this specific case.
        const recordType = this.currentRecordsObjectType || 'Asset'; // Use stored type or a default

        try {
            const response = await fetch('/api/get_record_details', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    record_id: recordId, // Send the specific ID
                    record_type: recordType // Send the determined object type
                })
            });
            // ... rest of the function ...
            const data = await response.json();
            this.hideLoading(); // Ensure loading is hidden

            if (data.success) {
                this.displaySingleRecord(data.record, data.follow_ups, `Details for: ${data.record.record_name}`);
            } else {
                this.addMessage(`Error retrieving details: ${data.error}`, 'ai', 'error');
            }
        } catch (error) {
            this.addMessage(`Connection error while getting details: ${error.message}`, 'ai', 'error');
            this.hideLoading();
        }
    }
    ```

**2. Modify `app.py` (Flask Backend):**

* **In `/api/send_command`**: When returning `multiple_records`, also determine and include the `object_type` of these records in the JSON response.
    ```python
    # In /api/send_command in app.py
    # ... (after getting results for multiple_records)
    if count > 1:
        # Determine object_type.
        # You can get this from the NLU analysis of the 'optimized_command'
        # or make extract_search_parameters more accessible/reusable here.
        # For simplicity, if 'asset' was in the command, assume 'Asset'.
        object_type_for_results = "Unknown"
        if "asset" in command.lower(): # Using original command for type hint here
            object_type_for_results = "Asset"
        elif "contact" in command.lower():
            object_type_for_results = "Contact"
        elif "account" in command.lower():
            object_type_for_results = "Account"
        # Add more types as needed or refine this logic

        # If you have search_params from an earlier step for optimized_command:
        # search_params_for_type = assistant.extract_search_parameters(optimized_command.lower())
        # object_type_for_results = search_params_for_type['object_type']

        return jsonify({
            'success': True,
            'type': 'multiple_records',
            'records': record_summaries,
            'count': count,
            'message': f"Found {count} records matching your query",
            'object_type': object_type_for_results # <<< ADD THIS
        })
    ```

* **Modify `/api/get_record_details`** to use the `record_id` and `record_type` to make a specific query:
    ```python
    # In app.py
    @app.route('/api/get_record_details', methods=['POST'])
    def get_record_details():
        try:
            data = request.get_json()
            record_id = data.get('record_id')
            record_type = data.get('record_type') # Get the record type sent from frontend

            if not record_id:
                return jsonify({'success': False, 'error': 'Record ID not provided'})
            if not record_type: # Fallback, though frontend should send it
                logger.warning("Record type not provided to /api/get_record_details, defaulting or might fail.")
                # Attempt to infer if absolutely necessary, but it's better from frontend context
                return jsonify({'success': False, 'error': 'Record Type not provided'})


            # Construct a new, specific command to fetch the record by its ID.
            # The NLU (get_optimized_zapier_input) should be robust enough for this.
            specific_command = f"Find {record_type} with Id {record_id}"
            # Example: "Find Asset with Id 001XXXX..."

            logger.info(f"Executing specific command for get_record_details: {specific_command}")

            # Process this specific command using the existing NLU and Zapier call mechanism
            # get_optimized_zapier_input will process "Find Asset with Id ..."
            # call_zapier_mcp will then call Zapier with this optimized instruction.
            result = assistant.call_zapier_mcp(specific_command)

            if result.get('success'):
                parsed_data = assistant.parse_salesforce_data(result['data'])
                
                # When fetching by ID, we generally expect one result (or zero if ID is invalid/not found)
                if parsed_data.get('parsed') and parsed_data.get('results') and parsed_data.get('count', 0) > 0:
                    # Assuming the first record in 'results' is the one we're looking for by ID
                    record_detail = parsed_data['results'][0] if isinstance(parsed_data['results'], list) else parsed_data['results']
                    formatted_record = assistant.format_record_for_display(record_detail)
                    follow_ups = assistant.get_follow_up_actions(record_detail)
                    
                    return jsonify({
                        'success': True,
                        'record': formatted_record,
                        'follow_ups': follow_ups
                    })
                else:
                    error_msg = f"Could not find details for {record_type} with ID {record_id}."
                    if result.get('data'):
                         error_msg += f" Zapier response: {str(result['data'])[:200]}"
                    logger.warning(error_msg)
                    return jsonify({'success': False, 'error': error_msg})
            else:
                logger.error(f"Zapier call failed for specific command '{specific_command}': {result.get('error')}")
                return jsonify({'success': False, 'error': result.get('error', 'Failed to fetch record details from Zapier')})
                
        except Exception as e:
            logger.error(f"Critical error in /api/get_record_details: {e}", exc_info=True)
            return jsonify({'success': False, 'error': f'An unexpected server error occurred: {str(e)}'})

    ```

**Summary of Why This Fix Works:**

1.  The frontend now sends a specific `record_id` and `record_type` when you select an item.
2.  The backend's `/api/get_record_details` endpoint constructs a new, precise command like "Find Asset with Id 02i..."
3.  This precise command is then processed by your NLU (`get_optimized_zapier_input`) which should ideally turn it into a very clear instruction for Zapier (e.g., "Find Asset Id: 02i...").
4.  Zapier receives a request to find a single record by its unique ID, eliminating the ambiguity about how the email "jhebhardt@cox.net" should be used (because it's not part of this new specific request).

This approach is much more reliable for fetching details of a selected item from a list. Remember to ensure your `get_optimized_zapier_input` and `extract_search_parameters` can correctly handle commands like "Find Asset with Id [ID_VALUE]". The NLU prompt for "EQUALS" operations (`Generate: "Find [Object] [field]: [Search Value]"`) should work if "Id" is treated as the `[field]` and the actual ID as the `[Search Value]`.