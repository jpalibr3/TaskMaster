ello Replit Agent,

We are refining the NLU pre-processing layer in my Python web application. The application interacts with Salesforce via Zapier MCP, and the goal is to allow users to input flexible, natural language queries.

Current Critical Issue (Referencing User-Provided Zapier MCP Log image_19c866.png):
The Zapier MCP server is failing to correctly parse the searchValue from the input string generated by our NLU pre-processor. When the NLU generated a structured string like "Action: Salesforce: Find Record(s); Object: Account; Field: Account Name; Operator: contains; Value: 'QA'; Expects: multiple results", Zapier misinterpreted the searchValue as the entire string segment before the actual 'QA' value. This results in failed searches (_zap_search_was_found_status: false).

The Fix: Change the NLU-Generated input String Format for Zapier
The NLU pre-processing function (get_optimized_zapier_input) in the Python backend must be updated. Its core task remains to analyze the raw user query, determine intent, entities, and the appropriate Zapier tool. However, the output string it generates (to be sent to Zapier) needs to change to a more natural sentence structure that Zapier has shown it can parse more effectively, especially for isolating the searchValue.

Detailed Requirements for Modifying the NLU Pre-processor (get_optimized_zapier_input function):

NLU Analysis (No Change to Core Task):

The NLU model (e.g., GPT-4 via client.chat.completions.create) should still:
Analyze the user's raw query for intent (find single/multiple, create, update).
Extract Salesforce Object, field(s), search value(s), and intended operator (equals, contains, etc.).
Determine if single or multiple results are expected.
Zapier Tool Selection (Guidance):

Based on the analysis, the NLU should internally decide which Zapier Salesforce Tool is most appropriate from the available list (see point 4).
Guidance for NLU: If the query implies multiple results (e.g., using words like "show me all," "list," "any") or uses a "contains" operator for a general text field, the NLU should aim to generate an input string that prompts Zapier to use its plural find tool (e.g., "Salesforce: Find Record(s)"). For unique lookups (e.g., by ID, specific email), it can aim for the singular find tool.
CRITICAL - New Output Format for NLU-Generated input String (to be sent to Zapier):

The NLU model must be instructed to generate its output string for Zapier using a natural sentence structure, prioritizing clarity for Zapier's parser.
Recommended Template for NLU Output (for find operations): "Find Salesforce [Object Name] [records/record] where [Full Field Name] [operator] '[Search Value]'" (Optionally, to subtly guide tool choice if needed, it can append: , expecting [multiple/single] results)
Breakdown and Key Instructions for the NLU:
Find Salesforce [Object Name] [records/record]: Start with this clear action phrase. Use "records" if aiming for Zapier's "Find Record(s)" tool, "record" if aiming for "Find Record."
where [Full Field Name]: Clearly state the field. The NLU must map user terms (e.g., "name" for Account -> "Account Name"; "email" for Contact -> "Email").
[operator]: Use simple operator words like "contains," "equals," "starts with."
'[Search Value]': Crucially, enclose the actual search value in single quotes. This helps delimit it. The NLU should pass the value using the casing from the user's query, as Zapier or Salesforce will handle case sensitivity based on their own rules (e.g., "QA TESTING" was successfully searched as "qa testing" by Zapier).
Example Outputs from NLU (these are the strings that will be sent to Zapier):
Raw User Query: "show accounts with QA in name"
NLU Analysis (Internal): Intent=find multiple, Object=Account, Field=Account Name, Operator=contains, Value=QA
NLU-Generated input for Zapier: "Find Salesforce Account records where Account Name contains 'QA'" (Could also append: , expecting multiple results)
Raw User Query: "details for account QA TESTING"
NLU Analysis (Internal): Intent=find single, Object=Account, Field=Account Name, Operator=equals, Value=QA TESTING
NLU-Generated input for Zapier: "Find Salesforce Account record where Account Name equals 'QA TESTING'"
Raw User Query: "contact email chris@alibre.com"
NLU Analysis (Internal): Intent=find single, Object=Contact, Field=Email, Operator=equals, Value=chris@alibre.com
NLU-Generated input for Zapier: "Find Salesforce Contact record where Email equals 'chris@alibre.com'"
AVOID: Do not include explicit keywords like "Action:", "Object:", "Field:", "Value:" directly within the natural language sentence being generated for Zapier, as the previous attempt showed this confuses Zapier's parser. The structure should be a coherent sentence.
List of Available Zapier Salesforce Tools (for NLU System Prompt context):

The NLU's system prompt needs this list to help it understand the capabilities it's targeting. (Ensure this list is accurate and complete based on your Zapier MCP configuration):
[
    "Salesforce: Find Record", "Salesforce: Find Record(s)", "Salesforce: Find Record(s) by Query",
    "Salesforce: Find Record by Query", "Salesforce: Get Record Attachments", "Salesforce: Add Contact to Campaign",
    "Salesforce: Add Lead to Campaign", "Salesforce: Convert Lead to Contact", "Salesforce: Create Child Records (with line item support)",
    "Salesforce: Create Contact", "Salesforce: Find Child Records", "Salesforce: Create Lead",
    "Salesforce: Create Note", "Salesforce: Create Record", "Salesforce: Create Record (UTC)",
    "Salesforce: Send Email", "Salesforce: Update Contact", "Salesforce: Update Lead",
    "Salesforce: Update Record", "Salesforce: Update Record (UTC)", "Salesforce: API Request (Beta)"
]
Refined System Prompt for the NLU Model (Core of the Change):

The system prompt for the client.chat.completions.create call (GPT-4/3.5-turbo) must be updated to emphasize the generation of the natural sentence format described in point 3.
It should state: "Your output MUST be a single, natural language sentence formatted to help Zapier's MCP parse it correctly. For find operations, use a structure like: 'Find Salesforce [Object] [records/record] where [Field] [operator] '[Value]'. Ensure the [Value] is enclosed in single quotes. Do NOT use explicit 'Action:', 'Object:', 'Field:', 'Value:' keywords in the output sentence itself."
Backend Logic: The Python backend (/send_command endpoint) will continue to:

Receive raw user query.
Call get_optimized_zapier_input() (which now uses the refined NLU instructions).
Use the returned string as the input for client.responses.create(...) to Zapier.
Handle results/errors as before.
Request to Replit Agent:
Please update the Python backend code, specifically the NLU pre-processing function (get_optimized_zapier_input) and the system prompt used within it for the client.chat.completions.create call. The main goal is for this function to output a natural language string for Zapier as per the new format specified in Requirement 3 (New Output Format). This change is intended to fix the critical issue where Zapier misinterprets the searchValue.

All other aspects of the web application (UI, existing features like history, save, confirmations, multi-result display, contextual follow-ups) should remain integrated and functional, now using this improved instruction pipeline to Zapier. "